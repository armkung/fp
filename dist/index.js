"use strict";Object.defineProperty(exports, "__esModule", { value: true });var _exportNames = { ifElse: true, when: true, applyTo: true, traverse: true, dropRightWhileWithKey: true, dropWhileWithKey: true, everyWithKey: true, filterWithKey: true, findWithKey: true, findFromWithKey: true, findIndexWithKey: true, findIndexFromWithKey: true, findKeyWithKey: true, findLastWithKey: true, findLastFromWithKey: true, findLastIndexWithKey: true, findLastIndexFromWithKey: true, findLastKeyWithKey: true, flatMapWithKey: true, flatMapDeepWithKey: true, flatMapDepthWithKey: true, forEachWithKey: true, forEachRightWithKey: true, forInWithKey: true, forInRightWithKey: true, forOwnWithKey: true, forOwnRightWithKey: true, mapWithKey: true, mapKeysWithKey: true, mapValuesWithKey: true, partitionWithKey: true, rejectWithKey: true, removeWithKey: true, someWithKey: true, takeRightWhileWithKey: true, takeWhileWithKey: true, timesWithKey: true, pickByWithKey: true, omitByWithKey: true, concatWith: true, is: true, evolve: true, applySpec: true, append: true, prepend: true, objOf: true };exports.objOf = exports.prepend = exports.append = exports.applySpec = exports.evolve = exports.is = exports.concatWith = exports.omitByWithKey = exports.pickByWithKey = exports.timesWithKey = exports.takeWhileWithKey = exports.takeRightWhileWithKey = exports.someWithKey = exports.removeWithKey = exports.rejectWithKey = exports.partitionWithKey = exports.mapValuesWithKey = exports.mapKeysWithKey = exports.mapWithKey = exports.forOwnRightWithKey = exports.forOwnWithKey = exports.forInRightWithKey = exports.forInWithKey = exports.forEachRightWithKey = exports.forEachWithKey = exports.flatMapDepthWithKey = exports.flatMapDeepWithKey = exports.flatMapWithKey = exports.findLastKeyWithKey = exports.findLastIndexFromWithKey = exports.findLastIndexWithKey = exports.findLastFromWithKey = exports.findLastWithKey = exports.findKeyWithKey = exports.findIndexFromWithKey = exports.findIndexWithKey = exports.findFromWithKey = exports.findWithKey = exports.filterWithKey = exports.everyWithKey = exports.dropWhileWithKey = exports.dropRightWhileWithKey = exports.traverse = exports.applyTo = exports.when = exports.ifElse = void 0;

var fp = _interopRequireWildcard(require("lodash/fp"));







































Object.keys(fp).forEach(function (key) {if (key === "default" || key === "__esModule") return;if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;Object.defineProperty(exports, key, { enumerable: true, get: function () {return fp[key];} });});function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}} /* eslint-disable */ // no curry
const ifElse = (predicate, whenTrueFn, whenFalseFn) => (...args) => predicate(...args) ? whenTrueFn(...args) : whenFalseFn(...args);exports.ifElse = ifElse;const when = (predicate, whenTrueFn) => (...args) => ifElse(predicate, whenTrueFn, fp.identity)(...args);exports.when = when;const applyTo = (...args) => fn => fp.apply(fn)(fp.flatten(args));exports.applyTo = applyTo;const traverse = (transform = fp.identity, fn = (value, path, obj) => fp.set(path, value, obj), initialValue = {}) => {let result;return function reduce(acc, keys = [], isFirstTime = true) {return when(fp.overSome([fp.isArray, fp.isPlainObject]), fp.pipe(fp.toPairs, fp.map(([key, value]) => {if (isFirstTime) {result = initialValue;}const path = keys.concat(key);const mappedValue = transform(value, path, fp.get(key, acc), result);result = fn(mappedValue, path, result, acc);reduce(mappedValue, path, false);}), () => result))(acc);};}; // curry
exports.traverse = traverse;const dropRightWhileWithKey = fp.dropRightWhile.convert({ cap: false });exports.dropRightWhileWithKey = dropRightWhileWithKey;
const dropWhileWithKey = fp.dropWhile.convert({ cap: false });exports.dropWhileWithKey = dropWhileWithKey;
const everyWithKey = fp.every.convert({ cap: false });exports.everyWithKey = everyWithKey;
const filterWithKey = fp.filter.convert({ cap: false });exports.filterWithKey = filterWithKey;
const findWithKey = fp.find.convert({ cap: false });exports.findWithKey = findWithKey;
const findFromWithKey = fp.findFrom.convert({ cap: false });exports.findFromWithKey = findFromWithKey;
const findIndexWithKey = fp.findIndex.convert({ cap: false });exports.findIndexWithKey = findIndexWithKey;
const findIndexFromWithKey = fp.findIndexFrom.convert({ cap: false });exports.findIndexFromWithKey = findIndexFromWithKey;
const findKeyWithKey = fp.findKey.convert({ cap: false });exports.findKeyWithKey = findKeyWithKey;
const findLastWithKey = fp.findLast.convert({ cap: false });exports.findLastWithKey = findLastWithKey;
const findLastFromWithKey = fp.findLastFrom.convert({ cap: false });exports.findLastFromWithKey = findLastFromWithKey;
const findLastIndexWithKey = fp.findLastIndex.convert({ cap: false });exports.findLastIndexWithKey = findLastIndexWithKey;
const findLastIndexFromWithKey = fp.findLastIndexFrom.convert({ cap: false });exports.findLastIndexFromWithKey = findLastIndexFromWithKey;
const findLastKeyWithKey = fp.findLastKey.convert({ cap: false });exports.findLastKeyWithKey = findLastKeyWithKey;
const flatMapWithKey = fp.flatMap.convert({ cap: false });exports.flatMapWithKey = flatMapWithKey;
const flatMapDeepWithKey = fp.flatMapDeep.convert({ cap: false });exports.flatMapDeepWithKey = flatMapDeepWithKey;
const flatMapDepthWithKey = fp.flatMapDepth.convert({ cap: false });exports.flatMapDepthWithKey = flatMapDepthWithKey;
const forEachWithKey = fp.forEach.convert({ cap: false });exports.forEachWithKey = forEachWithKey;
const forEachRightWithKey = fp.forEachRight.convert({ cap: false });exports.forEachRightWithKey = forEachRightWithKey;
const forInWithKey = fp.forIn.convert({ cap: false });exports.forInWithKey = forInWithKey;
const forInRightWithKey = fp.forInRight.convert({ cap: false });exports.forInRightWithKey = forInRightWithKey;
const forOwnWithKey = fp.forOwn.convert({ cap: false });exports.forOwnWithKey = forOwnWithKey;
const forOwnRightWithKey = fp.forOwnRight.convert({ cap: false });exports.forOwnRightWithKey = forOwnRightWithKey;
const mapWithKey = fp.map.convert({ cap: false });exports.mapWithKey = mapWithKey;
const mapKeysWithKey = fp.mapKeys.convert({ cap: false });exports.mapKeysWithKey = mapKeysWithKey;
const mapValuesWithKey = fp.mapValues.convert({ cap: false });exports.mapValuesWithKey = mapValuesWithKey;
const partitionWithKey = fp.partition.convert({ cap: false });exports.partitionWithKey = partitionWithKey;
const rejectWithKey = fp.reject.convert({ cap: false });exports.rejectWithKey = rejectWithKey;
const removeWithKey = fp.remove.convert({ cap: false });exports.removeWithKey = removeWithKey;
const someWithKey = fp.some.convert({ cap: false });exports.someWithKey = someWithKey;
const takeRightWhileWithKey = fp.takeRightWhile.convert({ cap: false });exports.takeRightWhileWithKey = takeRightWhileWithKey;
const takeWhileWithKey = fp.takeWhile.convert({ cap: false });exports.takeWhileWithKey = takeWhileWithKey;
const timesWithKey = fp.times.convert({ cap: false });exports.timesWithKey = timesWithKey;
const pickByWithKey = fp.times.convert({ cap: false });exports.pickByWithKey = pickByWithKey;
const omitByWithKey = fp.times.convert({ cap: false });exports.omitByWithKey = omitByWithKey;

const concatWith = fp.concat.convert({ rearg: true });exports.concatWith = concatWith;

const is = fp.curry(
(constructor, value) =>
/* istanbul ignore next */
value != null && value.constructor === constructor || value instanceof constructor);exports.is = is;


const evolve = fp.curry(function evolve(transformations, object) {
  const result = {};
  let transformation;
  let key;
  let type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    /* istanbul ignore next */
    result[key] =
    type === 'function' ?
    transformation(object[key]) :
    transformation && type === 'object' ?
    evolve(transformation, object[key]) :
    object[key];
  }
  return result;
});exports.evolve = evolve;

const applySpec = fp.curry((destObj, srcObj) =>
fp.mapValues(ifElse(fp.isFunction, applyTo(srcObj), fp.identity), destObj));exports.applySpec = applySpec;

const append = fp.curry((elem, list) => fp.concat(list, [elem]));exports.append = append;

const prepend = fp.curry((elem, list) => fp.concat([elem], list));exports.prepend = prepend;

const objOf = fp.curry((key, value) => fp.set(key, value, {}));exports.objOf = objOf;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,